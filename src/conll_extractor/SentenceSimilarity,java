package wordnet;

import edu.cmu.lti.jawjaw.pobj.POS;
import edu.cmu.lti.lexical_db.ILexicalDatabase;
import edu.cmu.lti.lexical_db.NictWordNet;
import edu.cmu.lti.lexical_db.data.Concept;
import edu.cmu.lti.ws4j.Relatedness;
import edu.cmu.lti.ws4j.RelatednessCalculator;
import edu.cmu.lti.ws4j.impl.HirstStOnge;
import edu.cmu.lti.ws4j.impl.JiangConrath;
import edu.cmu.lti.ws4j.impl.LeacockChodorow;
import edu.cmu.lti.ws4j.impl.Lesk;
import edu.cmu.lti.ws4j.impl.Lin;
import edu.cmu.lti.ws4j.impl.Path;
import edu.cmu.lti.ws4j.impl.Resnik;
import edu.cmu.lti.ws4j.impl.WuPalmer;
import edu.cmu.lti.ws4j.util.WS4JConfiguration;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class SentenceSimilarity {
    
    /** Beginning Directory */
    private static final File dirtyDir = new File("/home/sid/Documents/CSE487/GeneralData");
    
    /** Lexical Database */
    private static ILexicalDatabase db = new NictWordNet();
    
    /** Relatedness Calculator */
    private static RelatednessCalculator[] rcs = {
        //new HirstStOnge(db),
        //new LeacockChodorow(db),
        //new Lesk(db),
        new WuPalmer(db),
        //new Resnik(db),
        new JiangConrath(db),
        new Lin(db),
        new Path(db)
    };
    
    private static String comparedWord = "control";
    
    public static void main (String args[]) throws
            FileNotFoundException, IOException, SAXException,
            ParserConfigurationException, TransformerException{
        
        // All files to clean
        File[] dirtyFiles = null;
        
        ArrayList<String> wordList = new ArrayList<>();
        
        //Select your dirty files
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(dirtyDir);
        fileChooser.setMultiSelectionEnabled(true);
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            dirtyFiles = fileChooser.getSelectedFiles();
        }
        
        // for each dirty file make a clean with CoNLL Form and Parse Tree
        for(File dirtyFile : dirtyFiles){
            
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(dirtyFile);
            docBuilder.setErrorHandler(new ErrorHandler() {
                @Override
                public void error(SAXParseException exception) throws SAXException {}
                @Override
                public void fatalError(SAXParseException exception) throws SAXException {}
                @Override
                public void warning(SAXParseException exception) throws SAXException {}
            });
            
            // Get all of the <BODY> posts
            NodeList bodies = doc.getElementsByTagName("BODY");
            for (int i = 0; i < bodies.getLength(); i++){
                Node body = bodies.item(i);
                
                // String in the <BODY>
                String bodyString = body.getTextContent();
                
                //Clean up text lingo
                if(bodyString.matches(".*(emoti).*") ||
                        bodyString.matches(".*disconnected"))
                    continue;
                String firstChar = bodyString.substring(0,1).toUpperCase();
                bodyString = firstChar + bodyString.substring(1);
                bodyString = cleanString(bodyString);
                
                //System.out.println(bodyString);
                for (String word : bodyString.split(" ")){
                    wordList.add(word);
                }
                
                
            }
            
            /*
            // Get all of the <COMMENT> posts
            NodeList comments = doc.getElementsByTagName("COMMENT");
            for (int i = 0; i < comments.getLength(); i++){
            Node comment = comments.item(i);
            // String in the <COMMENT>
            String commentString = comment.getTextContent();
            if(commentString.equals(""))
            continue;
            //System.out.println(commentString.substring(1, commentString.length() -1));
            }
            */
            
            
            for(String word : wordList){
                // compare with other nouns, verbs, adjectives
                // consider triggers for when the similarity is strong enough
                RelatednessCalculator rc = new WuPalmer(db);
                String rcString = rc.getClass().getName().substring(22);
                System.out.print(word);
                //System.out.print(rcString + "\t");
                //System.out.print(conceptSimilarity(rc, word, comparedWord) + "\n");
            }
            
            /*
            System.out.println("Without synsets");
            System.out.println(semanticSimilarity("jazz", "blues"));
            System.out.println();
            System.out.println("With synsets");
            for(RelatednessCalculator rc : rcs){
                String rcString = rc.getClass().getName().substring(22);
                System.out.print(rcString + "\t");
                System.out.print(conceptSimilarity(rc, "jazz", "rock") + "\n");
            }
            
            System.out.println("Done with " + dirtyFile.getName());
            */
        }
        
    }
    
    /**
     * Returns a String that represents the similarity between two words
     * @param word1
     * @param word2
     */
    private static String semanticSimilarity(String word1, String word2) {
        String result = "";
        WS4JConfiguration.getInstance().setMFS(true);
        for (int i = 0; i < rcs.length; i++) {
            RelatednessCalculator rc = rcs[i];
            double s = rc.calcRelatednessOfWords(word1, word2);
            if (i == rcs.length-1)
                result += rc.getClass().getName().substring(22)+"\t"+s;
            else
                result += rc.getClass().getName().substring(22)+"\t"+s + "\n";
        }
        return result;
    }
    
    /**
     * Uses RelatedCalculator of your choice to compare synsets of two words
     * @param word1
     * @param word2
     * @return formatted string with the concept similarity inside of it
     */
    private static String conceptSimilarity(RelatednessCalculator rc,
            String word1, String word2){
        ILexicalDatabase db = new NictWordNet();
        WS4JConfiguration.getInstance().setMFS(true);
        List<POS[]> posPairs = rc.getPOSPairs();
        double maxScore = -1D;
        
        for(POS[] posPair: posPairs) {
            List<Concept> synsets1 = (List<Concept>)db.getAllConcepts(word1, posPair[0].toString());
            List<Concept> synsets2 = (List<Concept>)db.getAllConcepts(word2, posPair[1].toString());
            
            for(Concept synset1: synsets1) {
                for (Concept synset2: synsets2) {
                    Relatedness relatedness = rc.calcRelatednessOfSynset(synset1, synset2);
                    double score = relatedness.getScore();
                    if (score > maxScore) {
                        maxScore = score;
                    }
                }
            }
        }
        
        if (maxScore == -1D) {
            maxScore = 0.0;
        }
        
        return "sim(\"" + word1 + "\", \"" + word2 + "\") =  " + maxScore;
        //return "" + maxScore;
    }
    
    public static String cleanString(String input){
        input = input.replace(" i ", " I ");
        input = input.replace(" im ", " I am ");
        input = input.replace("Im", " I am ");
        input = input.replace(" r ", " are ");
        input = input.replace(" u ", " you ");
        input = input.replace(" ru ", " are you ");
        input = input.replace("ru ", "are you ");
        input = input.replace(" ru", " are you");
        input = input.replace(" tho ", " though ");
        input = input.replace(" pix ", " pictures ");
        input = input.replace(" pics ", " pictures ");
        input = input.replace(">:d<", ":d");
        return input;
    }
}
